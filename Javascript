/** Google Form â†’ WhatsApp via Twilio (Maximax)
 * Set Script Properties (Project Settings):
 *  - TWILIO_SID               e.g. ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 *  - TWILIO_TOKEN             your auth token
 *  - TWILIO_WHATSAPP_FROM     e.g. whatsapp:+14155238886 (sandbox) or whatsapp:+1XXXXXXXXXX (approved)
 *  - ADMIN_NUMBERS            comma-separated, e.g. whatsapp:+15015551234,whatsapp:+15015554321
 *  - CUSTOMER_PHONE_FIELD     EXACT question title for the phone field (e.g. Phone Number)
 *  - BRAND_NAME               e.g. Maximax Multi Services
 */

function onFormSubmit(e) {
  try {
    const props = PropertiesService.getScriptProperties();
    const from = props.getProperty('TWILIO_WHATSAPP_FROM');
    const adminsCSV = props.getProperty('ADMIN_NUMBERS') || '';
    const brand = props.getProperty('BRAND_NAME') || 'Maximax Multi Services';
    const adminList = adminsCSV.split(',').map(s => s.trim()).filter(Boolean);

    const nv = (e && e.namedValues) ? e.namedValues : {};
    const summary = buildSummary(nv);

    // 1) Notify admins
    if (adminList.length) {
      const adminBody = `ðŸŸ§ ${brand}: New form submission\n\n${summary}`;
      adminList.forEach(to => sendTwilioWhatsApp({ to, from, body: adminBody }));
    }

    // 2) Notify customer (optional)
    const phoneField = (props.getProperty('CUSTOMER_PHONE_FIELD') || '').trim();
    const phoneAnswer = phoneField && nv[phoneField] ? String(nv[phoneField][0]).trim() : '';
    if (phoneAnswer) {
      const to = normalizeAsWhatsApp(phoneAnswer);
      const replyBody = `${brand}: MÃ¨si! Nou resevwa fÃ²m ou a.\nYo pral kontakte w touswit.\n\nReferans:\n${summary.slice(0, 900)}`;
      sendTwilioWhatsApp({ to, from, body: replyBody });
    }
  } catch (err) {
    console.error('onFormSubmit error:', err);
  }
}

function buildSummary(namedValues) {
  const lines = [];
  Object.keys(namedValues).forEach(key => {
    const v = Array.isArray(namedValues[key]) ? namedValues[key][0] : namedValues[key];
    if (v !== '' && v != null) lines.push(`${key}: ${v}`);
  });
  const txt = lines.join('\n');
  return txt.length > 3500 ? txt.slice(0, 3490) + 'â€¦' : txt;
}

function normalizeAsWhatsApp(phone) {
  const d = ('' + phone).replace(/\s+/g, '');
  return d.startsWith('whatsapp:') ? d : `whatsapp:${d}`;
}

function sendTwilioWhatsApp({ to, from, body }) {
  const props = PropertiesService.getScriptProperties();
  const SID = props.getProperty('TWILIO_SID');
  const TOKEN = props.getProperty('TWILIO_TOKEN');
  if (!SID || !TOKEN || !from) throw new Error('Missing Twilio props');

  const url = `https://api.twilio.com/2010-04-01/Accounts/${SID}/Messages.json`;
  const payload = { To: to, From: from, Body: body };
  const options = {
    method: 'post',
    payload,
    headers: { Authorization: 'Basic ' + Utilities.base64Encode(`${SID}:${TOKEN}`) },
    muteHttpExceptions: true
  };
  const res = UrlFetchApp.fetch(url, options);
  if (res.getResponseCode() >= 300) {
    console.error('Twilio error', res.getResponseCode(), res.getContentText());
  }
}
